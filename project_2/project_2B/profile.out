Total: 859 samples
     653  76.0%  76.0%      859 100.0% thread_work
      32   3.7%  79.7%      108  12.6% SortedList_lookup
      26   3.0%  82.8%       98  11.4% SortedList_insert
      21   2.4%  85.2%       21   2.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       9   1.0%  86.3%        9   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:239
       7   0.8%  87.1%        7   0.8% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       7   0.8%  87.9%        7   0.8% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       7   0.8%  88.7%        7   0.8% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       6   0.7%  89.4%        6   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:237
       5   0.6%  90.0%        5   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:239
       5   0.6%  90.6%        5   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:240
       5   0.6%  91.2%        5   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1733
       4   0.5%  91.6%        4   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:211
       4   0.5%  92.1%        4   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       3   0.3%  92.4%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:161
       3   0.3%  92.8%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:212
       3   0.3%  93.1%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:225
       3   0.3%  93.5%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:238
       3   0.3%  93.8%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1709
       3   0.3%  94.2%        3   0.3% _init
       2   0.2%  94.4%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:206
       2   0.2%  94.6%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:226
       2   0.2%  94.9%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:253
       2   0.2%  95.1%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:256
       2   0.2%  95.3%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:263
       2   0.2%  95.6%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:789
       2   0.2%  95.8%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1056
       2   0.2%  96.0%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1235
       2   0.2%  96.3%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1244
       2   0.2%  96.5%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1595
       1   0.1%  96.6%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:164
       1   0.1%  96.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       1   0.1%  96.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:229
       1   0.1%  97.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:232
       1   0.1%  97.1%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:236
       1   0.1%  97.2%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:238
       1   0.1%  97.3%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:243
       1   0.1%  97.4%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:263
       1   0.1%  97.6%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:266
       1   0.1%  97.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:436
       1   0.1%  97.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:524
       1   0.1%  97.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:531
       1   0.1%  98.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:614
       1   0.1%  98.1%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:791
       1   0.1%  98.3%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:794
       1   0.1%  98.4%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:878
       1   0.1%  98.5%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:882
       1   0.1%  98.6%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:969
       1   0.1%  98.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1099
       1   0.1%  98.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1146
       1   0.1%  99.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1238
       1   0.1%  99.1%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1239
       1   0.1%  99.2%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1327
       1   0.1%  99.3%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1333
       1   0.1%  99.4%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1413
       1   0.1%  99.5%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1503
       1   0.1%  99.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1505
       1   0.1%  99.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1512
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1599
       1   0.1% 100.0%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1734
       0   0.0% 100.0%      859 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:118
       0   0.0% 100.0%      859 100.0% start_thread
ROUTINE ====================== thread_work in /u/be/ugrad/picchi/2b/lab2_list.c
   653    859 Total samples (flat / cumulative)
     .      .  371:     perror(message);
     .      .  372:     free_everything();
     .      .  373:     exit(ret_code);
     .      .  374: }
     .      .  375: 
---
     .      .  376: void *thread_work(void *arg) {
     .      .  377:     // var initialization
     .      .  378:     struct timespec begin, end;
     .      .  379:     unsigned long time_waiting = 0;
     .      .  380:     int hash_ret;
     .      .  381: 
     .      .  382:     // get args to function
     .      .  383:     SortedListElement_t* elements_for_thread = (SortedListElement_t *)arg;
     .      .  384: 
     .      .  385:     // insert all elements into list
     .      .  386:     for (int i=0; i<iterations_arg; i++) {
     .      .  387: 
     .      .  388:         hash_ret = hash_function(elements_for_thread[i].key) % lists_arg;
     .      .  389: 
     .      .  390:         // note time
     .      .  391:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  392:             error("lab2_list error: clock_gettime failed", 1);
     .      .  393:         }
     .      .  394:         
     .      .  395:         // LOCK
     .      .  396:         if (sync_arg == 109 /*"m"*/) {
     .      .  397:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  398:         }
     .      .  399:         else if (sync_arg == 115 /*"s"*/) {
   385    385  400:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  401:         }
     .      .  402:         
     .      .  403:         // record time waiting
     .      .  404:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  405:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  406:         }
     .      .  407:         if (opt_sync)
     .      .  408:             time_waiting += time_elapsed(&begin, &end);
     .      .  409: 
     .      .  410:         // perform SORTEDLIST_INSERT
     .     98  411:         SortedList_insert(&list_ptr[hash_ret], &elements_for_thread[i]);
     .      .  412: 
     .      .  413:         // UNLOCK
     .      .  414:         if (sync_arg == 109 /*"m"*/) {
     .      .  415:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  416:         }
     .      .  417:         else if (sync_arg == 115 /*"s"*/) {
     .      .  418:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  419:         }
     .      .  420:     }
     .      .  421: 
     .      .  422:     // get list length
     .      .  423:     // LOCK ---> get every lock
     .      .  424:     for (int i=0; i<lists_arg; i++) {
     .      .  425:         // note time
     .      .  426:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  427:             error("lab2_list error: clock_gettime failed", 1);
     .      .  428:         }
     .      .  429:         
     .      .  430:         if (sync_arg == 109 /*"m"*/) {
     .      .  431:             pthread_mutex_lock(&mutex_ptr[i]);
     .      .  432:         }
     .      .  433:         else if (sync_arg == 115 /*"s"*/) {
     .      .  434:             while (__sync_lock_test_and_set(&long_lock_ptr[i], 1));
     .      .  435:         }
     .      .  436: 
     .      .  437:         // record time waiting
     .      .  438:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  439:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  440:         }
     .      .  441:         if (opt_sync)
     .      .  442:             time_waiting += time_elapsed(&begin, &end);
     .      .  443:     }
     .      .  444: 
     .      .  445:     // perform SORTEDLIST_LENGTH
     .      .  446:     int list_length = 0;
     .      .  447:     int list_length_ret;
     .      .  448:     for (int i=0; i<lists_arg; i++) {
     .      .  449:         list_length_ret = SortedList_length(&list_ptr[i]);
     .      .  450:         if (list_length_ret < 0) {
     .      .  451:             corrupted_list_error("corrupted list: bad return value from SortedList_length()");
     .      .  452:         }
     .      .  453:         list_length += list_length_ret;
     .      .  454:     }
     .      .  455:     if (list_length < iterations_arg) {
     .      .  456:         corrupted_list_error("corrupted list: erroneous list length");
     .      .  457:     }
     .      .  458:     
     .      .  459:     // UNLOCK --> release all locks
     .      .  460:     for (int i=0; i<lists_arg; i++) {
     .      .  461:         if (sync_arg == 109 /*"m"*/) {
     .      .  462:             pthread_mutex_unlock(&mutex_ptr[i]);
     .      .  463:         }
     .      .  464:         else if (sync_arg == 115 /*"s"*/) {
     .      .  465:             __sync_lock_release(&long_lock_ptr[i]);
     .      .  466:         }
     .      .  467:     }
     .      .  468: 
     .      .  469:     // look up and delete the inserted keys
     .      .  470:     for (int i=0; i<iterations_arg; i++) {
     .      .  471: 
     .      .  472:         hash_ret = hash_function(elements_for_thread[i].key) % lists_arg;
     .      .  473:         
     .      .  474:         // note time
     .      .  475:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  476:             error("lab2_list error: clock_gettime failed", 1);
     .      .  477:         }
     .      .  478:         
     .      .  479:         // LOCK
     .      .  480:         if (sync_arg == 109 /*"m"*/) {
     .      .  481:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  482:         }
     .      .  483:         else if (sync_arg == 115 /*"s"*/) {
   190    190  484:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  485:         }
     .      .  486: 
     .      .  487:         // record time waiting
     .      .  488:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  489:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  490:         }
     .      .  491:         if (opt_sync)
     .      .  492:             time_waiting += time_elapsed(&begin, &end);
     .      .  493: 
     .      .  494:         // perform SOREDLIST_LOOKUP
     .    108  495:         SortedListElement_t *element = SortedList_lookup(&list_ptr[hash_ret], elements_for_thread[i].key);
     .      .  496:         if (!element) {
     .      .  497:             corrupted_list_error("list corrupted: couldn't retrieve element with known key");
     .      .  498:         }
     .      .  499: 
     .      .  500:         // UNLOCK
     .      .  501:         if (sync_arg == 109 /*"m"*/) {
     .      .  502:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  503:         }
     .      .  504:         else if (sync_arg == 115 /*"s"*/) {
     .      .  505:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  506:         }
     .      .  507: 
     .      .  508:         // note time
     .      .  509:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  510:             error("lab2_list error: clock_gettime failed", 1);
     .      .  511:         }
     .      .  512: 
     .      .  513:         // LOCK
     .      .  514:         if (sync_arg == 109 /*"m"*/) {
     .      .  515:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  516:         }
     .      .  517:         else if (sync_arg == 115 /*"s"*/) {
    78     78  518:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  519:         }
     .      .  520: 
     .      .  521:         // record time waiting
     .      .  522:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  523:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  524:         }
     .      .  525:         if (opt_sync)
     .      .  526:             time_waiting += time_elapsed(&begin, &end);
     .      .  527: 
     .      .  528:         // perform SORTEDLIST_DELETE
     .      .  529:         if (SortedList_delete(element) != 0) {
     .      .  530:             corrupted_list_error("list corrupted: corrupted prev/next pointers");
     .      .  531:         }
     .      .  532:         
     .      .  533:         // UNLOCK
     .      .  534:         if (sync_arg == 109 /*"m"*/) {
     .      .  535:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  536:         }
     .      .  537:         else if (sync_arg == 115 /*"s"*/) {
     .      .  538:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  539:         }
     .      .  540:     }
     .      .  541: 
     .      .  542:     return (void*)time_waiting;
     .      .  543: 
---
ROUTINE ====================== thread_work in /u/be/ugrad/picchi/2b/lab2_list.c
   653    859 Total samples (flat / cumulative)
     .      .  371:     perror(message);
     .      .  372:     free_everything();
     .      .  373:     exit(ret_code);
     .      .  374: }
     .      .  375: 
---
     .      .  376: void *thread_work(void *arg) {
     .      .  377:     // var initialization
     .      .  378:     struct timespec begin, end;
     .      .  379:     unsigned long time_waiting = 0;
     .      .  380:     int hash_ret;
     .      .  381: 
     .      .  382:     // get args to function
     .      .  383:     SortedListElement_t* elements_for_thread = (SortedListElement_t *)arg;
     .      .  384: 
     .      .  385:     // insert all elements into list
     .      .  386:     for (int i=0; i<iterations_arg; i++) {
     .      .  387: 
     .      .  388:         hash_ret = hash_function(elements_for_thread[i].key) % lists_arg;
     .      .  389: 
     .      .  390:         // note time
     .      .  391:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  392:             error("lab2_list error: clock_gettime failed", 1);
     .      .  393:         }
     .      .  394:         
     .      .  395:         // LOCK
     .      .  396:         if (sync_arg == 109 /*"m"*/) {
     .      .  397:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  398:         }
     .      .  399:         else if (sync_arg == 115 /*"s"*/) {
   385    385  400:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  401:         }
     .      .  402:         
     .      .  403:         // record time waiting
     .      .  404:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  405:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  406:         }
     .      .  407:         if (opt_sync)
     .      .  408:             time_waiting += time_elapsed(&begin, &end);
     .      .  409: 
     .      .  410:         // perform SORTEDLIST_INSERT
     .     98  411:         SortedList_insert(&list_ptr[hash_ret], &elements_for_thread[i]);
     .      .  412: 
     .      .  413:         // UNLOCK
     .      .  414:         if (sync_arg == 109 /*"m"*/) {
     .      .  415:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  416:         }
     .      .  417:         else if (sync_arg == 115 /*"s"*/) {
     .      .  418:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  419:         }
     .      .  420:     }
     .      .  421: 
     .      .  422:     // get list length
     .      .  423:     // LOCK ---> get every lock
     .      .  424:     for (int i=0; i<lists_arg; i++) {
     .      .  425:         // note time
     .      .  426:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  427:             error("lab2_list error: clock_gettime failed", 1);
     .      .  428:         }
     .      .  429:         
     .      .  430:         if (sync_arg == 109 /*"m"*/) {
     .      .  431:             pthread_mutex_lock(&mutex_ptr[i]);
     .      .  432:         }
     .      .  433:         else if (sync_arg == 115 /*"s"*/) {
     .      .  434:             while (__sync_lock_test_and_set(&long_lock_ptr[i], 1));
     .      .  435:         }
     .      .  436: 
     .      .  437:         // record time waiting
     .      .  438:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  439:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  440:         }
     .      .  441:         if (opt_sync)
     .      .  442:             time_waiting += time_elapsed(&begin, &end);
     .      .  443:     }
     .      .  444: 
     .      .  445:     // perform SORTEDLIST_LENGTH
     .      .  446:     int list_length = 0;
     .      .  447:     int list_length_ret;
     .      .  448:     for (int i=0; i<lists_arg; i++) {
     .      .  449:         list_length_ret = SortedList_length(&list_ptr[i]);
     .      .  450:         if (list_length_ret < 0) {
     .      .  451:             corrupted_list_error("corrupted list: bad return value from SortedList_length()");
     .      .  452:         }
     .      .  453:         list_length += list_length_ret;
     .      .  454:     }
     .      .  455:     if (list_length < iterations_arg) {
     .      .  456:         corrupted_list_error("corrupted list: erroneous list length");
     .      .  457:     }
     .      .  458:     
     .      .  459:     // UNLOCK --> release all locks
     .      .  460:     for (int i=0; i<lists_arg; i++) {
     .      .  461:         if (sync_arg == 109 /*"m"*/) {
     .      .  462:             pthread_mutex_unlock(&mutex_ptr[i]);
     .      .  463:         }
     .      .  464:         else if (sync_arg == 115 /*"s"*/) {
     .      .  465:             __sync_lock_release(&long_lock_ptr[i]);
     .      .  466:         }
     .      .  467:     }
     .      .  468: 
     .      .  469:     // look up and delete the inserted keys
     .      .  470:     for (int i=0; i<iterations_arg; i++) {
     .      .  471: 
     .      .  472:         hash_ret = hash_function(elements_for_thread[i].key) % lists_arg;
     .      .  473:         
     .      .  474:         // note time
     .      .  475:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  476:             error("lab2_list error: clock_gettime failed", 1);
     .      .  477:         }
     .      .  478:         
     .      .  479:         // LOCK
     .      .  480:         if (sync_arg == 109 /*"m"*/) {
     .      .  481:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  482:         }
     .      .  483:         else if (sync_arg == 115 /*"s"*/) {
   190    190  484:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  485:         }
     .      .  486: 
     .      .  487:         // record time waiting
     .      .  488:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  489:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  490:         }
     .      .  491:         if (opt_sync)
     .      .  492:             time_waiting += time_elapsed(&begin, &end);
     .      .  493: 
     .      .  494:         // perform SOREDLIST_LOOKUP
     .    108  495:         SortedListElement_t *element = SortedList_lookup(&list_ptr[hash_ret], elements_for_thread[i].key);
     .      .  496:         if (!element) {
     .      .  497:             corrupted_list_error("list corrupted: couldn't retrieve element with known key");
     .      .  498:         }
     .      .  499: 
     .      .  500:         // UNLOCK
     .      .  501:         if (sync_arg == 109 /*"m"*/) {
     .      .  502:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  503:         }
     .      .  504:         else if (sync_arg == 115 /*"s"*/) {
     .      .  505:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  506:         }
     .      .  507: 
     .      .  508:         // note time
     .      .  509:         if (clock_gettime(CLOCK_MONOTONIC, &begin) < 0) {
     .      .  510:             error("lab2_list error: clock_gettime failed", 1);
     .      .  511:         }
     .      .  512: 
     .      .  513:         // LOCK
     .      .  514:         if (sync_arg == 109 /*"m"*/) {
     .      .  515:             pthread_mutex_lock(&mutex_ptr[hash_ret]);
     .      .  516:         }
     .      .  517:         else if (sync_arg == 115 /*"s"*/) {
    78     78  518:             while (__sync_lock_test_and_set(&long_lock_ptr[hash_ret], 1));
     .      .  519:         }
     .      .  520: 
     .      .  521:         // record time waiting
     .      .  522:         if (clock_gettime(CLOCK_MONOTONIC, &end) < 0) {
     .      .  523:             error("lab2_list error: clock_gettime() failed", 1);
     .      .  524:         }
     .      .  525:         if (opt_sync)
     .      .  526:             time_waiting += time_elapsed(&begin, &end);
     .      .  527: 
     .      .  528:         // perform SORTEDLIST_DELETE
     .      .  529:         if (SortedList_delete(element) != 0) {
     .      .  530:             corrupted_list_error("list corrupted: corrupted prev/next pointers");
     .      .  531:         }
     .      .  532:         
     .      .  533:         // UNLOCK
     .      .  534:         if (sync_arg == 109 /*"m"*/) {
     .      .  535:             pthread_mutex_unlock(&mutex_ptr[hash_ret]);
     .      .  536:         }
     .      .  537:         else if (sync_arg == 115 /*"s"*/) {
     .      .  538:             __sync_lock_release(&long_lock_ptr[hash_ret]);
     .      .  539:         }
     .      .  540:     }
     .      .  541: 
     .      .  542:     return (void*)time_waiting;
     .      .  543: 
---
